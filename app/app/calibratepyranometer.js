'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var ReactDOM = _interopDefault(require('react-dom'));
require('electron');

class CalibratePyranometer extends React.Component{constructor(a){super(a), this.unit={voltage:React.createElement("span",null,"V"),currentdensity:React.createElement("span",null,"mA cm",React.createElement("sup",null,"-2")),current:React.createElement("span",null,"mA"),efficiency:React.createElement("span",null,"%"),fillfactor:React.createElement("span",null,"%"),sun:React.createElement("span",null,"sun"),area:React.createElement("span",null,"cm",React.createElement("sup",null,"2"))}, this.state={scale:0,offset:0}, this.handleInputChange=this.handleInputChange.bind(this), this.applyScaling=this.applyScaling.bind(this), this.close=this.close.bind(this);}close(){this.props.onClose();}async applyScaling(a,b){try{let c=JSON.stringify({instrumentId:this.props.instrumentId,groupName:this.props.groupName,ampBoxGain:b,pyranoSensitivity:a}),d=new Headers({"Content-Type":"application/json","Content-Length":c.length.toString()});await fetch("http://"+this.props.config.trackerHost+":"+this.props.config.trackerPort+"/light.setPyranometerScaling",{method:"POST",headers:d,body:c}).then(a=>{if(200!==a.status)throw"Response error"}), this.setState({rescaling_success:!0,rescaling_error:!1});}catch(a){this.setState({rescaling_success:!1,rescaling_error:!0});}}async componentDidMount(){await fetch("http://"+this.props.config.trackerHost+":"+this.props.config.trackerPort+"/light.getPyranometerScaling?instrumentId="+this.props.instrumentId+"&groupName="+this.props.groupName,{method:"GET"}).then(a=>a.json()).then(a=>{this.setState({pyranoSensitivity:a.pyranoSensitivity,ampBoxGain:a.ampBoxGain}), this.setState({rescaling_error_read:!1});}).catch(a=>{console.error(a), console.error("Error in getting pyranometer information"), this.setState({rescaling_error_read:!0});});}handleInputChange(a){const b=a.target,c="checkbox"===b.type?b.checked:b.value,d=b.name;this.setState({[d]:c});}render(){this.state.control;return React.createElement("div",{className:"container-fluid",id:"calib_light_list"},React.createElement("h4",null,"Pyranometer linear calibration settings"),this.state.rescaling_success&&React.createElement("div",{className:"alert alert-success"},"Pyranometer has been rescaled."),this.state.rescaling_error&&React.createElement("div",{className:"alert alert-danger"},"Error in rescaling the pyranometer. Make sure the host is running."),this.state.rescaling_error_read&&React.createElement("div",{className:"alert alert-danger"},"Error in retrieving the pyranometer scaling."),React.createElement("div",{className:"alert alert-info"},React.createElement("span",{className:"glyphicon glyphicon-info"})," The result of the equation should be in sun intensity (where 1 sun = 1'000 W m",React.createElement("sup",null,"-2"),")"),React.createElement("div",{className:"row"},React.createElement("div",{className:"col-sm-3"},React.createElement("label",null,"Pyranometer Sensitivity")),React.createElement("div",{className:"col-sm-3"},React.createElement("input",{type:"text",name:"pyranoSensitivity",value:this.state.pyranoSensitivity,onChange:this.handleInputChange})," V / ( W m",React.createElement("sup",null,"-2")," )")),React.createElement("div",{className:"row"},React.createElement("div",{className:"col-sm-3"},React.createElement("label",null,"AmpBox gain")),React.createElement("div",{className:"col-sm-3"},React.createElement("input",{type:"text",name:"ampBoxGain",value:this.state.ampBoxGain,onChange:this.handleInputChange})," mV / mA")),React.createElement("br",null),React.createElement("div",{className:"row"},React.createElement("div",{className:"col-sm-9"},React.createElement("div",{className:"btn-group"},React.createElement("button",{type:"button",className:"btn btn-primary",onClick:()=>this.applyScaling(this.state.scale,this.state.offset)},"Apply scaling"),React.createElement("button",{type:"button",className:"btn btn-default",onClick:this.close},"Close")))))}}

const {ipcRenderer: ipcRenderer$1}=require('electron');ipcRenderer$1.on('loadForm',(a,b)=>{render(b);});function onClose(){ipcRenderer$1.send('closeForm');}function render(a){ReactDOM.render(React.createElement(CalibratePyranometer,{instrumentId:a.instrumentId,groupName:a.groupName,config:a.config,onClose:onClose}),document.getElementById('root'));}

//# sourceMappingURL=calibratepyranometer.js.map